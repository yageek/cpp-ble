// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.idl

#pragma once

#include "central_interface.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCentralInterface final : ::djinni::JniInterface<::cppble::CentralInterface, NativeCentralInterface> {
public:
    using CppType = std::shared_ptr<::cppble::CentralInterface>;
    using CppOptType = std::shared_ptr<::cppble::CentralInterface>;
    using JniType = jobject;

    using Boxed = NativeCentralInterface;

    ~NativeCentralInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCentralInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCentralInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCentralInterface();
    friend ::djinni::JniClass<NativeCentralInterface>;
    friend ::djinni::JniInterface<::cppble::CentralInterface, NativeCentralInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::cppble::CentralInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void start_scan(const std::vector<cppble::UUID> & uuids) override;
        void stop_scan() override;

    private:
        friend ::djinni::JniInterface<::cppble::CentralInterface, ::djinni_generated::NativeCentralInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("net/yageek/cppble/CentralInterface") };
    const jmethodID method_startScan { ::djinni::jniGetMethodID(clazz.get(), "startScan", "(Ljava/util/ArrayList;)V") };
    const jmethodID method_stopScan { ::djinni::jniGetMethodID(clazz.get(), "stopScan", "()V") };
};

}  // namespace djinni_generated
